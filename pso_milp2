import pandas as pd
import numpy as np
from pyswarms.discrete import BinaryPSO
import pandapower as pp
from pulp import (
    LpProblem, LpMinimize, LpVariable, LpBinary,
    lpSum, PULP_CBC_CMD
)

# ------------------------------------------------------------------
# 1) Load data
# ------------------------------------------------------------------
bus_df    = pd.read_excel("new feeder.xlsx", sheet_name="Bus")
branch_df = pd.read_excel("new feeder.xlsx", sheet_name="Branch")

# ------------------------------------------------------------------
# 2) Undervoltage candidates (V < 95 %)
# ------------------------------------------------------------------
undervoltage_threshold = 95
candidate_buses = bus_df.loc[
    bus_df["Voltage"] < undervoltage_threshold, "Bus ID"
].tolist()

# ------------------------------------------------------------------
# 3) Capacitor size options / system base
# ------------------------------------------------------------------
capacitor_sizes_kvar = [0, 50, 100, 150, 200, 300]

print("Candidate Buses for Capacitor Placement:")
print(candidate_buses)
print(
    f"Total Load: "
    f"{bus_df['MW Loading'].sum():.2f} MW / "
    f"{bus_df['Mvar Loading'].sum():.2f} MVAR"
)

# ------------------------------------------------------------------
# 4) Build pandapower network + evaluate objective
# ------------------------------------------------------------------
def build_network(bus_df, branch_df, capacitor_vector=None, cap_map=None):
    net = pp.create_empty_network()
    bus_lookup = {}

    # create buses
    for _, row in bus_df.iterrows():
        bus_lookup[row["Bus ID"]] = pp.create_bus(
            net, vn_kv=row["Nominal kV"], name=row["Bus ID"]
        )

    # slack at first HV bus
    hv_bus = bus_df[bus_df["Nominal kV"] >= 11].iloc[0]["Bus ID"]
    pp.create_ext_grid(net, bus=bus_lookup[hv_bus], vm_pu=1.0, name="Slack")

    # loads
    for _, row in bus_df.iterrows():
        pp.create_load(
            net,
            bus=bus_lookup[row["Bus ID"]],
            p_mw=row["MW Loading"],
            q_mvar=row["Mvar Loading"],
            name=f"Load@{row['Bus ID']}"
        )

    # lines
    for _, row in branch_df.iterrows():
        if row["Bus 1"] in bus_lookup and row["Bus 2"] in bus_lookup:
            pp.create_line_from_parameters(
                net,
                from_bus=bus_lookup[row["Bus 1"]],
                to_bus=bus_lookup[row["Bus 2"]],
                length_km=1.0,
                r_ohm_per_km=0.3,
                x_ohm_per_km=0.1,
                c_nf_per_km=0,
                max_i_ka=0.2,
                name=row["ID"],
            )

    # capacitors
    if capacitor_vector is not None:
        for bit, bus_id in zip(capacitor_vector, candidate_buses):
            if bit == 1 and bus_id in bus_lookup:
                kvar = 100 if cap_map is None else cap_map.get(bus_id, 100)
                pp.create_shunt(
                    net,
                    bus=bus_lookup[bus_id],
                    q_mvar=-kvar / 1000.0,
                    p_mw=0.0,
                    name=f"Cap@{bus_id}",
                )

    try:
        pp.runpp(net)
    except Exception:
        # infeasible → large penalty
        return 1e6, None, None, None, None, None

    total_loss        = net.res_line.pl_mw.sum()
    voltage_deviation = np.abs(net.res_bus.vm_pu - 1.0).sum()
    voltage_viol      = ((net.res_bus.vm_pu < 0.95) | (net.res_bus.vm_pu > 1.05)).sum()
    penalty           = voltage_viol * 10

    return (
        total_loss + voltage_deviation + penalty,
        net.res_bus, net.res_line,
        total_loss, voltage_deviation, voltage_viol
    )

# ------------------------------------------------------------------
# 5) Fitness for PSO
# ------------------------------------------------------------------
def fitness_function(x):
    return np.array([
        build_network(bus_df, branch_df, particle.astype(int))[0]
        for particle in x
    ])

# ------------------------------------------------------------------
# 6) Binary PSO
# ------------------------------------------------------------------
options   = {"c1": 1.5, "c2": 1.5, "w": 0.9, "k": 3, "p": 2}
num_cand  = len(candidate_buses)
b_pso     = BinaryPSO(n_particles=20, dimensions=num_cand, options=options)
best_cost, best_pos = b_pso.optimize(fitness_function, iters=30, verbose=True)

best_pos = best_pos.astype(int)
optimal_locations = [
    candidate_buses[i] for i in range(num_cand) if best_pos[i] == 1
]

print("\nOptimal Capacitor Locations:")
print(optimal_locations)
print(f"Number of Capacitors Installed: {len(optimal_locations)}")

# ------------------------------------------------------------------
# 7) MILP capacitor sizing (min-kvar ≥ 300)
# ------------------------------------------------------------------
def optimize_capacitor_sizes(best_pos, cap_opts=capacitor_sizes_kvar):
    cap_buses = [
        bus for i, bus in enumerate(candidate_buses) if best_pos[i] == 1
    ]
    if not cap_buses:
        return {}

    prob = LpProblem("CapSizing", LpMinimize)
    x = {
        bus: [LpVariable(f"x_{bus}_{i}", cat=LpBinary)
              for i in range(len(cap_opts))]
        for bus in cap_buses
    }

    # one size per bus
    for bus in cap_buses:
        prob += lpSum(x[bus]) == 1

    # total kvar
    total_kvar = lpSum(
        x[bus][i] * cap_opts[i] for bus in cap_buses for i in range(len(cap_opts))
    )
    prob += total_kvar                  # objective
    prob += total_kvar >= 300           # enforce minimum total kvar

    prob.solve(PULP_CBC_CMD(msg=False))

    # if solver infeasible → return zeros
    if prob.status != 1:
        return {bus: 0 for bus in cap_buses}

    return {
        bus: sum(cap_opts[i] * round(x[bus][i].value()) for i in range(len(cap_opts)))
        for bus in cap_buses
    }

cap_solution = optimize_capacitor_sizes(best_pos)
print("\nOptimal Capacitor Ratings (kVAR):")
for bus, kvar in cap_solution.items():
    print(f"{bus}: {kvar:.0f} kVAR")

# ------------------------------------------------------------------
# 8) Final power-flow evaluation
# ------------------------------------------------------------------
final_cost, bus_v, line_v, loss, dev, viol = build_network(
    bus_df, branch_df, best_pos, cap_solution
)

if loss is None:
    print("\nPower flow solution failed. Final evaluation not available.")
else:
    print(f"\nFinal Network Cost: {final_cost:.4f}")
    print(f"Total Power Loss (MW): {loss:.4f}")
    print(f"Total Voltage Deviation (p.u.): {dev:.4f}")
    print(f"Voltage Violations (buses <0.95 or >1.05 p.u.): {viol}")
    print("\nVoltage Profile:")
    print(bus_v[["bus", "vm_pu"]])
    print("\nLine Losses (MW):")
    print(line_v[["from_bus", "to_bus", "pl_mw"]])
